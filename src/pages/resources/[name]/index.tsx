import React from "react"
import Head from "next/head"
import { useRouter } from "next/router"
import YAML from "yaml"

import { ApiContext } from "@/utils/api"

import PageTitle from "@/components/PageTitle"
import PageOverlay from "@/components/PageOverlay"
import ModalConfirm from "@/components/ModalConfirm"
import Button from "@/components/Button"
import YamlEditor from "@/components/YamlEditor"
import { PencilIcon, PlusIcon, XMarkIcon } from "@heroicons/react/24/solid"

export default function Resource() {
  const router = useRouter()
  const api = React.useContext(ApiContext)
  const [data, setData] = React.useState<any>(null)
  const [content, setContent] = React.useState<string>("")
  const [oldContent, setOldContent] = React.useState<string>("")
  const [isSaveConfirmOpen, setSaveIsConfirmOpen] = React.useState(false)

  const isEdit = router.query.Mode === "Edit"
  const isEdited = content !== oldContent

  React.useEffect(() => {
    if (!router.isReady) return
    api.instance
      .get(`/resources/${router.query.name}`)
      .then((res) => {
        let data = res.data

        const cpy = { ...data }

        if (isEdit) {
          console.log("EDIT")
          delete cpy.Name
          delete cpy.UpdatedAt
          delete cpy.CreatedAt
          delete cpy.Kind
          delete cpy.ConfigKey
          cpy.Name = undefined
          setOldContent
        }
        const yaml = YAML.stringify(cpy)
        setData(data)
        setContent(yaml)
        setOldContent(yaml)
      })
      .catch((err) => {
        // Todo: Handle error
        console.error(err)
      })
  }, [
    api.instance,
    router.isReady,
    router.query.name,
    isEdit,
    setData,
    setContent,
  ])

  async function onSave() {
    const parsed = YAML.parse(content)
    await api.instance
      .patch(`/resources/${router.query.name}`, parsed)
      .then((res) => {
        router.push(`/resources/${router.query.name}`)
      })
      .catch((err) => {
        throw new Error(
          err?.response?.data?.msg || err?.response?.data || "An error occured",
        )
      })
  }

  return (
    <>
      {isSaveConfirmOpen ? (
        <ModalConfirm
          title="Are you sure to edit this resource ?"
          onClose={() => setSaveIsConfirmOpen(false)}
          onCancel={() => setSaveIsConfirmOpen(false)}
          onConfirm={onSave}
        />
      ) : null}
      <Head>
        <title>Resource | Nanocl Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo.webp" />
      </Head>
      <main id="nano-main">
        <PageOverlay>
          <PageTitle>
            <div className="flex w-full justify-between">
              <div className="flex">
                <h3>Resource {router.query.name}</h3>
              </div>
              <div className="flex">
                {!isEdit ? (
                  <Button
                    title="Edit"
                    onClick={() => {
                      router.push(`/resources/${router.query.name}?Mode=Edit`)
                    }}
                    className="min-w-fit bg-blue-500 hover:bg-blue-700"
                  >
                    <PencilIcon className="h-4 w-4" />
                  </Button>
                ) : null}
                {isEdit ? (
                  <Button
                    title="Cancel"
                    className="ml-2 min-w-fit bg-red-500 hover:bg-red-700"
                    onClick={() => {
                      router.push(`/resources/${router.query.name}`)
                    }}
                  >
                    <XMarkIcon className="h-4 w-4" />
                  </Button>
                ) : null}
                {isEdited ? (
                  <Button
                    title="Save"
                    className="ml-2 min-w-fit bg-green-500 hover:bg-green-700"
                    onClick={() => {
                      setSaveIsConfirmOpen(true)
                    }}
                  >
                    <PlusIcon className="h-4 w-4" />
                  </Button>
                ) : null}
              </div>
            </div>
          </PageTitle>
          <YamlEditor
            isReadOnly={!isEdit}
            onChange={(value) => {
              setContent(value || "")
            }}
          >
            {content}
          </YamlEditor>
        </PageOverlay>
      </main>
    </>
  )
}
