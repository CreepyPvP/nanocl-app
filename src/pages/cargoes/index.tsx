import React from "react"
import Head from "next/head"
import moment from "moment"
import { useRouter } from "next/router"

import { ApiContext } from "@/utils/api"

import PageTitle from "@/components/PageTitle"
import PageOverlay from "@/components/PageOverlay"
import Table from "@/components/Table"
import Button from "@/components/Button"
import { debounce } from "lodash"
import { MagnifyingGlassIcon, PlusIcon } from "@heroicons/react/24/solid"

export default function Metrics() {
  const router = useRouter()
  const api = React.useContext(ApiContext)
  const [data, setData] = React.useState<any[]>([])
  const [namespace, setNameSpace] = React.useState<string>("")
  const [namespaces, setNamespaces] = React.useState<any[]>([])

  function searchNamespace(val: string) {
    api.instance.get(`/namespaces?Name=${val}`).then((res) => {
      setNamespaces(res.data)
    })
  }

  const debouncedSearch = debounce(searchNamespace, 1000, {
    leading: false,
    trailing: true,
  })

  React.useEffect(() => {
    if (!api.url || !router.isReady) return

    if (!router.query.Namespace) {
      router.replace("/cargoes?Namespace=global")
      return
    }

    api.instance
      .get(`/cargoes?Namespace=${router.query.Namespace}`)
      .then((res) => {
        setNameSpace(router.query.Namespace as string)
        setData(res.data)
      })
  }, [api.url, api.instance, router, setData, setNameSpace])

  return (
    <>
      <Head>
        <title>Cargoes | Nanocl Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo.webp" />
      </Head>
      <main id="nano-main">
        <PageOverlay>
          <PageTitle>
            <div className="flex w-full flex-row items-center justify-between">
              <div className="flex flex-row items-center">
                <h3 className="text-xl">Cargoes</h3>
                <div className="ml-2">
                  {namespaces.length ? (
                    <div className="relative">
                      <ul className="absolute top-[46px] max-h-[200px] w-full overflow-auto rounded bg-[var(--ifm-background-secondary-color)]">
                        {namespaces.map((ns) => (
                          <li
                            className="cursor-pointer border-b border-[var(--ifm-color-emphasis-300)] p-2 text-xl last:border-b-0 hover:bg-[rgba(255,255,255,0.1)]"
                            key={ns.Name}
                            onClick={() => {
                              setNamespaces([])
                              router.push(`/cargoes?Namespace=${ns.Name}`)
                            }}
                          >
                            {ns.Name}
                          </li>
                        ))}
                      </ul>
                    </div>
                  ) : null}
                  <input
                    className="rounded bg-transparent p-2 text-xl"
                    type="text"
                    autoComplete="off"
                    onChange={(e) => {
                      setNameSpace(e.target.value)
                      debouncedSearch(e.target.value)
                    }}
                    value={namespace}
                  />
                </div>
              </div>
              <div className="flex flex-row">
                <Button
                  title="New"
                  className="min-w-fit bg-green-500 hover:bg-green-700"
                  onClick={() => {
                    router.push(`/cargoes/new?Namespace=${namespace}`)
                  }}
                >
                  <PlusIcon className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </PageTitle>
          <Table
            ID="Name"
            Data={data}
            Columns={[
              { Name: "Name", Key: "Name" },
              {
                Name: "Image",
                Key: "Image",
                Render: (data) => data.Config.Container.Image,
              },
              {
                Name: "Instances",
                Key: "InstanceRunning",
                Render: (data) =>
                  `[ ${data.InstanceRunning} / ${data.InstanceTotal} ]`,
              },
              {
                Name: "Version",
                Key: "Version",
                Render: (data) => data.Config.Version,
              },
              {
                Name: "Created at",
                Key: "CreatedAt",
                Render: (row: any) =>
                  moment(row.CreatedAt).format("YYYY-MM-DD HH:mm:ss"),
              },
              {
                Name: "Updated at",
                Key: "UpdatedAt",
                Render: (row: any) =>
                  moment(row.UpdatedAt).format("YYYY-MM-DD HH:mm:ss"),
              },
              {
                Name: "Actions",
                Key: "Actions",
                Render: (row: any) => (
                  <div className="flex">
                    <Button
                      title="Inspect"
                      className="min-w-fit bg-blue-500 hover:bg-blue-700"
                      onClick={() => {
                        router.push(
                          `/cargoes/${row.Name}?Namespace=${row.NamespaceName}`,
                        )
                      }}
                    >
                      <MagnifyingGlassIcon className="h-4 w-4" />
                    </Button>
                  </div>
                ),
              },
            ]}
          />
        </PageOverlay>
      </main>
    </>
  )
}
