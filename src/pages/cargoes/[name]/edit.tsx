import React from "react"
import Head from "next/head"
import { useRouter } from "next/router"
import YAML from "yaml"
import Editor from "@monaco-editor/react"
import { CircleLoader } from "react-spinners"

import { ApiContext } from "@/utils/api"

import PageTitle from "@/components/PageTitle"
import PageOverlay from "@/components/PageOverlay"
import Button from "@/components/Button"
import ModalConfirm from "@/components/ModalConfirm"

export default function Cargo() {
  const router = useRouter()
  const api = React.useContext(ApiContext)

  const [data, setData] = React.useState<string | null>(null)
  const [oldData, setOldData] = React.useState<string | null>(null)
  const [confirmAction, setConfirmAction] = React.useState<string | null>(null)

  const isChanged = data !== oldData

  const confirmActions: Record<string, any> = {
    Save: {
      title: "Are you sure to save this cargo ?",
      onConfirm: async () => {
        await api.instance
          .put(`/cargoes/${router.query.name}`, YAML.parse(data || ""))
          .then(() => {
            return router.push(
              `/cargoes/${router.query.name}?Namespace=${router.query.Namespace}`,
            )
          })
          .catch((err) => {
            const res = err?.response
            throw new Error(res?.data?.msg || res?.data || "An error occured")
          })
      },
    },
  }

  React.useEffect(() => {
    if (!router.isReady) return

    api.instance
      .get(
        `/cargoes/${router.query.name}/inspect?Namespace=${router.query.Namespace}`,
      )
      .then((res) => {
        const yaml = YAML.stringify({
          Replication: res.data.Config.Replication,
          Container: res.data.Config.Container,
        })
        setOldData(yaml)
        setData(yaml)
      })
      .catch((err) => {
        console.error(err)
      })
  }, [api.instance, router])

  const onCloseConfirm = () => {
    setConfirmAction(null)
  }

  return (
    <>
      {confirmAction ? (
        <ModalConfirm
          title={confirmActions[confirmAction].title}
          onClose={onCloseConfirm}
          onCancel={onCloseConfirm}
          onConfirm={confirmActions[confirmAction].onConfirm}
        />
      ) : null}
      <Head>
        <title>Cargo | Nanocl Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo.webp" />
      </Head>
      <main id="nano-main">
        <PageOverlay>
          <PageTitle>
            <div className="flex w-full justify-between">
              <div className="flex">
                <h3>Cargo {router.query.name}</h3>
              </div>
              <div className="flex">
                <Button
                  className="bg-red-500 hover:bg-red-700"
                  onClick={() => {
                    router.push(
                      `/cargoes/${router.query.name}?Namespace=${router.query.Namespace}`,
                    )
                  }}
                >
                  Discard
                </Button>
                {isChanged ? (
                  <Button
                    className="ml-2 bg-green-500 hover:bg-green-700"
                    onClick={() => {
                      setConfirmAction("Save")
                    }}
                  >
                    Save
                  </Button>
                ) : null}
              </div>
            </div>
          </PageTitle>
          {data ? (
            <Editor
              theme="vs-dark"
              height="80vh"
              defaultLanguage="yaml"
              defaultValue={data}
              value={data}
              onChange={(value) => {
                setData(value || "")
              }}
            />
          ) : (
            <div className="flex h-full w-full justify-center">
              <CircleLoader color="orange" />
            </div>
          )}
        </PageOverlay>
      </main>
    </>
  )
}
