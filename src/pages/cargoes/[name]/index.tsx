import React from "react"
import Head from "next/head"
import { useRouter } from "next/router"
import moment from "moment"

import { ApiContext } from "@/utils/api"

import PageTitle from "@/components/PageTitle"
import PageOverlay from "@/components/PageOverlay"
import Table from "@/components/Table"
import Button from "@/components/Button"
import ModalConfirm from "@/components/ModalConfirm"
import {
  DocumentTextIcon,
  MinusIcon,
  PencilIcon,
  RocketLaunchIcon,
  StopIcon,
} from "@heroicons/react/24/solid"

export default function Cargo() {
  const router = useRouter()
  const api = React.useContext(ApiContext)

  const [data, setData] = React.useState<any>(null)
  const [confirmAction, setConfirmAction] = React.useState<string | null>(null)

  const confirmActions: Record<string, any> = {
    Delete: {
      title: "Are you sure to delete this cargo ?",
      onConfirm: async () => {
        await api.instance
          .delete(
            `/cargoes/${router.query.name}?Namespace=${router.query.Namespace}`,
          )
          .then(() => {
            return router.push(`/cargoes?Namespace=${router.query.Namespace}`)
          })
          .catch((err) => {
            const res = err?.response
            throw new Error(res?.data?.msg || res?.data || "An error occured")
          })
      },
    },
    Stop: {
      title: "Are you sure to stop this cargo ?",
      onConfirm: async () => {
        await api.instance
          .post(
            `/cargoes/${router.query.name}/stop?Namespace=${router.query.Namespace}`,
          )
          .then(() => {
            return router.push(
              `/cargoes/${router.query.name}?Namespace=${router.query.Namespace}`,
            )
          })
          .catch((err) => {
            const res = err?.response
            throw new Error(res?.data?.msg || res?.data || "An error occured")
          })
      },
    },
    Start: {
      title: "Are you sure to start this cargo ?",
      onConfirm: async () => {
        await api.instance
          .post(
            `/cargoes/${router.query.name}/start?Namespace=${router.query.Namespace}`,
          )
          .then(() => {
            return router.push(
              `/cargoes/${router.query.name}?Namespace=${router.query.Namespace}`,
            )
          })
          .catch((err) => {
            const res = err?.response
            throw new Error(res?.data?.msg || res?.data || "An error occured")
          })
      },
    },
  }

  React.useEffect(() => {
    if (!router.isReady) return

    api.instance
      .get(
        `/cargoes/${router.query.name}/inspect?Namespace=${router.query.Namespace}`,
      )
      .then((res) => {
        setData(res.data)
      })
      .catch((err) => {
        console.error(err)
      })
  }, [api.instance, router.isReady, router.query.name, router.query.Namespace])

  function onCloseConfirm() {
    setConfirmAction(null)
  }

  function onOpenDeleteConfirm() {
    setConfirmAction("Delete")
  }

  function onOpenStopConfirm() {
    setConfirmAction("Stop")
  }

  function onOpenStartConfirm() {
    setConfirmAction("Start")
  }

  console.log({ router })

  return (
    <>
      {confirmAction ? (
        <ModalConfirm
          title={confirmActions[confirmAction].title}
          onClose={onCloseConfirm}
          onCancel={onCloseConfirm}
          onConfirm={confirmActions[confirmAction].onConfirm}
        />
      ) : null}
      <Head>
        <title>Cargo | Nanocl Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo.webp" />
      </Head>
      <main id="nano-main">
        <PageOverlay>
          <PageTitle>
            <div className="flex w-full justify-between">
              <div className="flex">
                <h3 className="text-xl">Cargo {data?.Name}</h3>
              </div>
              <div className="flex">
                <Button
                  title="Delete"
                  className="mr-2 min-w-fit bg-red-500 hover:bg-red-700"
                  onClick={onOpenDeleteConfirm}
                >
                  <MinusIcon className="h-4 w-4" />
                </Button>
                <Button
                  title="Stop"
                  className="mr-2 min-w-fit bg-purple-500 hover:bg-purple-700"
                  onClick={onOpenStopConfirm}
                >
                  <StopIcon className="h-4 w-4" />
                </Button>
                <Button
                  title="Start"
                  className="mr-2 min-w-fit bg-green-500 hover:bg-green-700"
                  onClick={onOpenStartConfirm}
                >
                  <RocketLaunchIcon className="h-4 w-4" />
                </Button>
                <Button
                  title="Edit"
                  className="min-w-fit bg-blue-500 hover:bg-blue-700"
                  onClick={() => {
                    router.push(
                      `/cargoes/${router.query.name}/edit?Namespace=${router.query.Namespace}`,
                    )
                  }}
                >
                  <PencilIcon className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </PageTitle>
          <Table
            ID={(data) => data.Container.Id}
            Data={data?.Instances || []}
            Columns={[
              {
                Name: "Name",
                Key: "Name",
                Render: (data) => data.Container.Names[0].replace("/", ""),
              },
              {
                Name: "Image",
                Key: "Image",
                Render: (data) => data.Container.Image,
              },
              {
                Name: "Created at",
                Key: "Created",
                Render: (data) =>
                  moment(data.Container.Created, "X").format(
                    "DD/MM/YYYY HH:mm:ss",
                  ),
              },
              {
                Name: "Ip Address",
                Key: "Ip",
                Render: (data) =>
                  data.Container.NetworkSettings.Networks[
                    router.query.Namespace as string
                  ]?.IPAddress || "-",
              },
              {
                Name: "State",
                Key: "State",
                Render: (data) => data.Container.State,
              },
              {
                Name: "Status",
                Key: "Status",
                Render: (data) => data.Container.Status,
              },
              {
                Name: "Actions",
                Key: "Actions",
                Render: (row: any, i) => (
                  <div className="flex">
                    <Button
                      title="Logs"
                      className="min-w-fit bg-blue-500 hover:bg-blue-700"
                      onClick={() => {
                        router.push(
                          `/cargoes/${router.query.name}/${
                            ((router.query.name || "") as string) +
                            (i ? `-${i}` : "")
                          }/logs?Namespace=${router.query.Namespace}`,
                        )
                      }}
                    >
                      <DocumentTextIcon className="h-4 w-4" />
                    </Button>
                  </div>
                ),
              },
            ]}
          />
        </PageOverlay>
      </main>
    </>
  )
}
