import React from "react"
import Head from "next/head"

import { ApiContext } from "@/utils/api"
import type * as Types from "@/utils/types"

import PageTitle from "@/components/PageTitle"
import PageOverlay from "@/components/PageOverlay"
import ProgressBar from "@/components/ProgressBar"

const Home = () => {
  const api = React.useContext(ApiContext)
  const [nodeData, setNodeData] = React.useState<Types.Node[]>([])

  React.useEffect(() => {
    if (!api.url) return
    Promise.all([
      api.instance.get("/nodes"),
      api.instance.get("/metrics?Kind=MEMORY"),
      api.instance.get("/metrics?Kind=CPU"),
    ])
      .then((results) => {
        const curr_nodes = results[0].data
        const mem_nodes = results[1].data
        const cpu_nodes = results[2].data
        const nodes: Record<string, Types.Node> = {}

        for (let node of curr_nodes) {
          const node_name = node.Name
          nodes[node_name] = {
            ...(nodes[node_name] || {}),
            NodeName: node_name,
            IpAddress: node.IpAddress,
          }
        }

        for (let mem_node of mem_nodes) {
          const node_name = mem_node.NodeName
          nodes[node_name] = {
            ...(nodes[node_name] || {}),
            NodeName: node_name,
            Ram: mem_node.Data,
          }
        }

        for (let cpu_node of cpu_nodes) {
          const node_name = cpu_node.NodeName
          let usage = 0
          const cpu = cpu_node.Data.reduce((acc: any, curr: any) => {
            usage += curr.Usage
            return {
              ...acc,
              ...curr,
            }
          }, {})
          cpu.Usage = usage / cpu_node.Data.length
          nodes[node_name] = {
            ...(nodes[node_name] || {}),
            NodeName: node_name,
            Cpu: cpu,
          }
        }
        const n = Object.values(nodes)
        setNodeData(n)
      })
      .catch((err) => {
        // TODO: Handle error
        console.log(err)
      })
  }, [api.url, api.instance, setNodeData])

  return (
    <>
      <Head>
        <title>Namespace | Nanocl Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo.webp" />
      </Head>
      <main id="nano-main">
        <PageOverlay>
          <PageTitle>
            <h3 className="text-xl">Home</h3>
          </PageTitle>
          <div className="flex flex-row pl-2 pr-2">
            {nodeData.map((node) => (
              <div
                className="flex w-full flex-col justify-center"
                key={node.NodeName}
              >
                <h2 className="mb-1 text-lg capitalize">
                  {node.NodeName}:{" "}
                  <code className="text-base">{node.IpAddress}</code>
                </h2>
                <h3 className="text-md pb-2 pt-2">Memory</h3>
                <ProgressBar Progress={(node.Ram.Used / node.Ram.Total) * 100}>
                  <p className="text-xs text-white">
                    {(node.Ram.Used * (9.31 * 1e-10)).toFixed(0)} /{" "}
                    {(node.Ram.Total * (9.31 * 1e-10)).toFixed(0)} G
                  </p>
                </ProgressBar>
                <h3 className="text-md pb-2 pt-2">Cpu</h3>
                <ProgressBar Progress={node.Cpu.Usage}>
                  <p className="text-xs text-white">
                    {node.Cpu.Usage.toFixed(0)}%
                  </p>
                </ProgressBar>
              </div>
            ))}
          </div>
        </PageOverlay>
      </main>
    </>
  )
}

export default Home
