import React from "react"
import Head from "next/head"
import { useRouter } from "next/router"

import PageTitle from "@/components/PageTitle"
import PageOverlay from "@/components/PageOverlay"
import Button from "@/components/Button"

import { ApiContext, lastVersion, instanceError } from "@/utils/api"

export default function Settings() {
  const router = useRouter()
  const api = React.useContext(ApiContext)
  const inputRef = React.useRef<HTMLInputElement>(null)
  const [value, setValue] = React.useState<string>(
    api?.url?.replace(`/${lastVersion}`, "") || "",
  )
  const [error, setError] = React.useState<string | null>(null)

  React.useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus()
    }
  }, [])

  function onChange(e: React.ChangeEvent<HTMLInputElement>) {
    setValue(e.target.value)
  }

  function onSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    setError(null)

    const url = `${value}/${lastVersion}/_ping`

    console.log({ url })

    api.instance
      .head(url)
      .then((res) => {
        if (res.status !== 202) {
          throw instanceError(res)
        }
        window.localStorage.setItem("API_URL", value)
        return router.push("/")
      })
      .catch((err) => {
        const e = instanceError(err)
        setError(e.message)
      })
  }

  return (
    <>
      <Head>
        <title>Settings | Nanocl Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo.webp" />
      </Head>
      <main id="nano-main">
        <PageOverlay>
          <PageTitle>
            <h1 className="text-[3rem]">Settings</h1>
          </PageTitle>
          <form className="mt-4 flex flex-col" onSubmit={onSubmit}>
            <label className="text-[var(--ifm-color-emphasis-500)]]">
              Api url
            </label>
            <input
              ref={inputRef}
              type="text"
              value={value}
              onChange={onChange}
              placeholder="http://api.nanocl.internal"
              className="mb-4 mt-2 rounded border border-white bg-transparent p-2 focus:border-[var(--ifm-color-primary)] focus:outline-none focus:ring-1 focus:ring-[var(--ifm-color-primary)]"
            />
            {error && (
              <p className="mb-4 max-w-full break-all text-center text-sm font-bold text-red-500">
                {error}
              </p>
            )}
            <Button className="bg-green-500 hover:bg-green-700" type="submit">
              Submit
            </Button>
          </form>
        </PageOverlay>
      </main>
    </>
  )
}
